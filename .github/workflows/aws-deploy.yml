name: Deploy to AWS ECS

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository
        run: |
          if ! aws ecr describe-repositories --repository-names rsshub > /dev/null 2>&1; then
            aws ecr create-repository --repository-name rsshub
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/rsshub:${{ github.sha }}

      - name: Create ECS cluster
        run: |
          if ! aws ecs describe-clusters --clusters rsshub-cluster --query 'clusters[0]' > /dev/null 2>&1; then
            aws ecs create-cluster --cluster-name rsshub-cluster
          fi

      - name: Create IAM roles
        run: |
          if ! aws iam get-role --role-name ecsTaskExecutionRole > /dev/null 2>&1; then
            # Create the role
            aws iam create-role \
              --role-name ecsTaskExecutionRole \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "ecs-tasks.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'

            # Wait for role to be created
            sleep 10

            # Attach required policies
            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

            # Wait for policy attachment
            sleep 10
          fi

          # Verify role exists
          aws iam get-role --role-name ecsTaskExecutionRole

      - name: Create CloudWatch log group
        run: |
          if ! aws logs describe-log-groups --log-group-name-prefix /ecs/rsshub > /dev/null 2>&1; then
            aws logs create-log-group --log-group-name /ecs/rsshub
          fi

      - name: Create task definition
        run: |
          ROLE_ARN=$(aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.Arn' --output text)
          cat > task-definition.json << EOF
          {
            "family": "rsshub",
            "networkMode": "awsvpc",
            "executionRoleArn": "$ROLE_ARN",
            "containerDefinitions": [
              # ... rest of the task definition remains the same
            ]
          }
          EOF

      - name: Register task definition
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create or update ECS service
        run: |
          if ! aws ecs describe-services --cluster rsshub-cluster --services rsshub-service --query 'services[0]' > /dev/null 2>&1; then
            aws ecs create-service \
              --cluster rsshub-cluster \
              --service-name rsshub-service \
              --task-definition ${{ steps.task-def.outputs.task_definition_arn }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_ID }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
          else
            aws ecs update-service \
              --cluster rsshub-cluster \
              --service rsshub-service \
              --task-definition ${{ steps.task-def.outputs.task_definition_arn }} \
              --force-new-deployment
          fi

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster rsshub-cluster \
            --services rsshub-service
